<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classresp__parser" xml:lang="en-US">
<title>resp_parser Class Reference</title>
<indexterm><primary>resp_parser</primary></indexterm>
<para>
<computeroutput>#include &lt;part-a/lib/resp_parser.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classresp__parser_1a881e195aed5df64ceceb6512b0e51b01"/>void <emphasis role="strong">get_val</emphasis> (std::string &amp;response)</para>
</listitem>
            <listitem><para><anchor xml:id="_classresp__parser_1a3498e4ebf4660f06a01c8da2b60fdb5c"/>void <emphasis role="strong">parse</emphasis> (std::string input, <link linkend="_structparse__op">parse_op</link> *pop)</para>
</listitem>
            <listitem><para>void <link linkend="_classresp__parser_1a62311f01225a09a6cc46c4b6f66696ac">convert_to_byte_stream</link> (std::string &amp;bufferStr, std::string &amp;ip)</para>
</listitem>
            <listitem><para>int <link linkend="_classresp__parser_1a341fd50f9b16eab8308238fdc3fe9d7f">parse_command</link> (std::string &amp;data, <link linkend="_structparse__op">parse_op</link> *pop)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A parser for RESP (Redis Serialization Protocol) commands.</para>

<para>The <link linkend="_classresp__parser">resp_parser</link> class provides methods to parse input strings formatted in RESP, extract commands and their arguments, and convert standard strings into RESP-formatted byte streams. It supports parsing of commands such as GET, SET, DEL, and PRINT. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classresp__parser_1a62311f01225a09a6cc46c4b6f66696ac"/><section>
    <title>convert_to_byte_stream()</title>
<indexterm><primary>convert_to_byte_stream</primary><secondary>resp_parser</secondary></indexterm>
<indexterm><primary>resp_parser</primary><secondary>convert_to_byte_stream</secondary></indexterm>
<para><computeroutput>void resp_parser::convert_to_byte_stream (std::string &amp; bufferStr, std::string &amp; ip)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Converts an IP string to a byte stream.</para>

<para>This function constructs a byte stream from the given IP string by first creating a prefix with the &apos;$&apos; character followed by the length of the IP string, then a carriage return and line feed (CRLF), the IP string itself, and finally another CRLF.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>bufferStr</entry><entry>
<para>Reference to a string where the resulting byte stream will be stored. </para>
</entry>
                            </row>
                            <row>
<entry>ip</entry><entry>
<para>The IP address string to be converted. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classresp__parser_a62311f01225a09a6cc46c4b6f66696ac_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classresp__parser_1a341fd50f9b16eab8308238fdc3fe9d7f"/><section>
    <title>parse_command()</title>
<indexterm><primary>parse_command</primary><secondary>resp_parser</secondary></indexterm>
<indexterm><primary>resp_parser</primary><secondary>parse_command</secondary></indexterm>
<para><computeroutput>int resp_parser::parse_command (std::string &amp; data, <link linkend="_structparse__op">parse_op</link> * pop)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Parses a RESP-encoded command string and extracts its components.</para>

<para>This function processes an input RESP string (data) and attempts to extract the command, key, and optionally the value from it. The parsed components are stored in the provided <link linkend="_structparse__op">parse_op</link> structure (pop).</para>

<para>The function handles several special cases:<itemizedlist>
<listitem>
<para>If the input is &quot;print&quot;, it sets the command in pop to &quot;print&quot; and returns success.</para>
</listitem><listitem>
<para>If the input contains &quot;CONFIG&quot;, it sets the command to &quot;CONFIG&quot; and returns success.</para>
</listitem><listitem>
<para>If the input matches the predefined quit command, the command is set to &quot;quit&quot;.</para>
</listitem></itemizedlist>
</para>

<para>For a general RESP command, the function:<itemizedlist>
<listitem>
<para>Verifies that the input starts with &apos;*&apos; and is of sufficient length.</para>
</listitem><listitem>
<para>Extracts the number of arguments.</para>
</listitem><listitem>
<para>Validates and retrieves the command string using helper functions, ensuring it is one of the supported commands (&quot;set&quot;, &quot;get&quot;, &quot;del&quot;).</para>
</listitem><listitem>
<para>Extracts the key from the input.</para>
</listitem><listitem>
<para>If the command is &quot;set&quot;, it also extracts the associated value.</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>data</entry><entry>
<para>A reference to the RESP-encoded command string to be parsed. </para>
</entry>
                            </row>
                            <row>
<entry>pop</entry><entry>
<para>A pointer to a <link linkend="_structparse__op">parse_op</link> structure where the parsed command, key, and value (if applicable) will be stored.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>int Returns 1 if the command is successfully parsed; otherwise, returns 0 to indicate a parsing failure (due to incorrect formatting or unsupported number of arguments). </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
<link linkend="_resp__parser_8h">resp_parser.h</link></section>
</section>
