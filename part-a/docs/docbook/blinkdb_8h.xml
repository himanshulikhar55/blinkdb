<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_blinkdb_8h" xml:lang="en-US">
<title>blinkdb.h File Reference</title>
<indexterm><primary>blinkdb.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;hashtable.h&quot;<?linebreak?></programlisting>Include dependency graph for blinkdb.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="blinkdb_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="blinkdb_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classblinkdb">blinkdb</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Defines the blinkdb class, a key-value store with in-memory and disk storage.</para>

<para>This file introduces the blinkdb class which implements an in-memory key-value store database. The design uses an in-memory hashtable (with open addressing and double hashing) to store key-value pairs. When the hashtable becomes 70% full, it checks if its size is greater than 1GB. If no, it resizes and rehashes the existing eentries. Else, it evicts 50% of entries to disk storage. It leverages a sparse index for file lookups. A bloom filter is used to optimize read operations by quickly ruling out non-existent keys and saving a disk-access.</para>

<para>The class provides basic operations:<itemizedlist>
<listitem>
<para>SET: Insert a key-value pair into the store.</para>
</listitem><listitem>
<para>GET: Retrieve the value corresponding to a given key, fetching from memory first, then disk if needed.</para>
</listitem><listitem>
<para>DEL: Delete a key-value pair from the in-memory store.</para>
</listitem><listitem>
<para>print: Print the contents of the in-memory store.</para>
</listitem></itemizedlist>
</para>

<para>The design ensures that when the user exits, all stored data, both in memory and on disk, are cleared (obviously).</para>

<para><formalpara><title>See also</title>

<para><link linkend="_hashtable_8h">hashtable.h</link></para>
</formalpara>
<formalpara><title>Copyright</title>

<para>Copyright (c) 2025 </para>
</formalpara>
</para>
</section>
</section>
