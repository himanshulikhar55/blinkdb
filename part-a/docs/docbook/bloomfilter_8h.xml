<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_bloomfilter_8h" xml:lang="en-US">
<title>bloomfilter.h File Reference</title>
<indexterm><primary>bloomfilter.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;vector&gt;<?linebreak?>#include &lt;functional&gt;<?linebreak?>#include &lt;string&gt;<?linebreak?></programlisting>Include dependency graph for bloomfilter.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="bloomfilter_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="bloomfilter_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classbloomfilter">bloomfilter</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Implements a space-efficient probabilistic Bloom filter.</para>

<para>This file defines the bloomfilter class which provides a space-efficient data structure to test whether a key is possibly present in a dataset.</para>

<para>A Bloom filter is characterized by the following parameters:<itemizedlist>
<listitem>
<para><inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="form_0.png"/>
            </imageobject>
</inlinemediaobject>
: Expected number of elements to be inserted.</para>
</listitem><listitem>
<para><inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="form_1.png"/>
            </imageobject>
</inlinemediaobject>
: Size of the bit array (in bits).</para>
</listitem><listitem>
<para><inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="form_2.png"/>
            </imageobject>
</inlinemediaobject>
: Number of hash functions.</para>
</listitem></itemizedlist>
</para>

<para>The optimal parameters for a desired false positive probability <inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="form_3.png"/>
            </imageobject>
</inlinemediaobject>
 are calculated as follows:</para>

<para><orderedlist>
<listitem>
<para><emphasis role="bold">Bit Array Size</emphasis>:           <mediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="form_8.png"/>
            </imageobject>
        </mediaobject>
</para>
</listitem><listitem>
<para><emphasis role="bold">Number of Hash Functions</emphasis>:           <mediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="form_9.png"/>
            </imageobject>
        </mediaobject>
</para>
</listitem></orderedlist>
</para>

<para>These formulas help minimize the false positive rate while using space efficiently.</para>

<para>The implementation combines two hash functions to simulate k hash functions using the formula: hash_i = hash1 + i * hash2.</para>

<para>This file is part of the design-lab project and is intended for quickly checking key membership with a controlled false positive rate. </para>
</section>
</section>
