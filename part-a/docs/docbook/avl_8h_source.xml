<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_avl_8h_source" xml:lang="en-US">
<title>avl.h</title>
<indexterm><primary>/home/himanshulikhar/Downloads/design-lab/project/part-a/src/lib/avl.h</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
2 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
3 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
4 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
5 
6 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classavl__node">avl_node</link>{
7 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
8 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;value;
9 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;find_height(<link linkend="_classavl__node">avl_node</link>&#32;*head){
10 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(head){
11 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;left_ht&#32;=&#32;1&#32;+&#32;find_height(head-&gt;left);
12 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;right_ht&#32;=&#32;1&#32;+&#32;find_height(head-&gt;right);
13 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::max(left_ht,&#32;right_ht);
14 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
16 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17 
18 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_tree(<link linkend="_classavl__node">avl_node</link>&#32;*head){
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(head){
20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;(&apos;</emphasis>&#32;&lt;&lt;&#32;head-&gt;key&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;head-&gt;value&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&#32;&quot;</emphasis>;
21 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_tree(head-&gt;left);
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_tree(head-&gt;right);
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;-1&#32;&quot;</emphasis>;
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classavl__node">avl_node</link>&#32;*right_rotate(<link linkend="_classavl__node">avl_node</link>&#32;*head){
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classavl__node">avl_node</link>&#32;*temp1&#32;=&#32;head-&gt;left;
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classavl__node">avl_node</link>&#32;*temp2&#32;=&#32;temp1-&gt;right;
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp1-&gt;right&#32;=&#32;head;
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;head-&gt;left&#32;=&#32;temp2;
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;temp1;
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classavl__node">avl_node</link>&#32;*left_rotate(<link linkend="_classavl__node">avl_node</link>&#32;*head){
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classavl__node">avl_node</link>&#32;*temp1&#32;=&#32;head-&gt;right;
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classavl__node">avl_node</link>&#32;*temp2&#32;=&#32;temp1-&gt;left;
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;head-&gt;right&#32;=&#32;temp2;
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp1-&gt;left&#32;=&#32;head;
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;temp1;
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
44 
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classavl__node">avl_node</link>&#32;*&#32;delete_key(<link linkend="_classavl__node">avl_node</link>&#32;*head,&#32;std::string&#32;key){
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!head)
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;head;
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(key&#32;&lt;&#32;head-&gt;key){
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;head-&gt;left&#32;=&#32;delete_key(head-&gt;left,&#32;key);
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(head-&gt;key&#32;&gt;&#32;key){
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;head-&gt;right&#32;=&#32;delete_key(head-&gt;right,&#32;key);
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!head-&gt;left&#32;&amp;&amp;&#32;!head-&gt;right)
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!head-&gt;right)
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;head&#32;=&#32;head-&gt;left;
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*head&#32;=&#32;*(head-&gt;right);
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bal&#32;=&#32;find_height(head-&gt;left)&#32;-&#32;find_height(head-&gt;right);
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(bal&#32;&gt;&#32;1){
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;left_ht&#32;=&#32;!head-&gt;left&#32;?&#32;0&#32;:&#32;find_height(head-&gt;left-&gt;left);
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;right_ht&#32;=&#32;!head-&gt;right&#32;?&#32;0&#32;:&#32;find_height(head-&gt;left-&gt;right);
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(left_ht-right_ht&#32;&gt;=&#32;0)
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;right_rotate(head);
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>{
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;head-&gt;left&#32;=&#32;left_rotate(head-&gt;left);
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;right_rotate(head);
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(bal&#32;&lt;&#32;-1){
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;left_ht&#32;=&#32;!head-&gt;left&#32;?&#32;0&#32;:&#32;find_height(head-&gt;right-&gt;left);
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;right_ht&#32;=&#32;!head-&gt;right&#32;?&#32;0&#32;:&#32;find_height(head-&gt;right-&gt;right);
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(left_ht-right_ht&#32;&lt;=&#32;0)
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;left_rotate(head);
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>{
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;head-&gt;right&#32;=&#32;right_rotate(head-&gt;right);
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;left_rotate(head);
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;head;
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classavl__node">avl_node</link>&#32;*&#32;insert_node(<link linkend="_classavl__node">avl_node</link>&#32;*head,&#32;std::string&#32;key,&#32;std::string&#32;val){
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(key&#32;&lt;&#32;head-&gt;key)
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;head-&gt;left&#32;=&#32;&#32;insert_node(head-&gt;left,&#32;key,&#32;val);
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(key&#32;&gt;&#32;head-&gt;key)
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;head-&gt;right&#32;=&#32;&#32;insert_node(head-&gt;right,&#32;key,&#32;val);
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;head;
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bal&#32;=&#32;find_height(head-&gt;left)&#32;-&#32;find_height(head-&gt;right);
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//means&#32;left&#32;has&#32;more&#32;than&#32;right.&#32;left&#32;left&#32;case</emphasis>
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(bal&#32;&gt;&#32;1&#32;&amp;&amp;&#32;key&#32;&lt;&#32;head-&gt;left-&gt;key)
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;right_rotate(head);
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(bal&#32;&gt;&#32;1&#32;&amp;&amp;&#32;key&#32;&gt;&#32;head-&gt;left-&gt;key){
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;head-&gt;left&#32;=&#32;left_rotate(head-&gt;left);
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;right_rotate(head);
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">if</emphasis>(bal&#32;&lt;&#32;-1&#32;&amp;&amp;&#32;key&#32;&gt;&#32;head-&gt;right-&gt;key)
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;left_rotate(head);
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(bal&#32;&lt;&#32;-1&#32;&amp;&amp;&#32;key&#32;&lt;&#32;head-&gt;right-&gt;key){
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;head-&gt;right&#32;=&#32;right_rotate(head-&gt;right);
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;left_rotate(head);
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;head;
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
107 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classavl__node">avl_node</link>&#32;*left;
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classavl__node">avl_node</link>&#32;*right;
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;key;
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classavl__node">avl_node</link>(std::string&#32;k,&#32;std::string&#32;v){
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;=&#32;k;
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;std::move(v);
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;left&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;right&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;get_value(){
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;value;
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classavl__node">avl_node</link>*&#32;insert(std::string&#32;key,&#32;std::string&#32;val){
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;insert_node(<emphasis role="keyword">this</emphasis>,&#32;key,&#32;val);
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classavl__node">avl_node</link>*&#32;del(std::string&#32;key){
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;delete_key(<emphasis role="keyword">this</emphasis>,&#32;key);
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print(){
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_tree(<emphasis role="keyword">this</emphasis>);
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
129 };
</programlisting></section>
