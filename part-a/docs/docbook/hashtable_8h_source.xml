<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_hashtable_8h_source" xml:lang="en-US">
<title>hashtable.h</title>
<indexterm><primary>hashtable.h</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
2 <emphasis role="preprocessor">#include&#32;&quot;memorypool.h&quot;</emphasis>
3 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
4 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
5 <emphasis role="preprocessor">#include&#32;&lt;atomic&gt;</emphasis>
6 
14 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classhashtable">hashtable</link>&#32;{
15 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
16 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Entry&#32;{
17 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::atomic&lt;bool&gt;&#32;occupied;
18 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;key;
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structBlock">Block</link>*&#32;value;
20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
21 &#32;&#32;&#32;&#32;
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;Entry&gt;&#32;table;
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;capacity;
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classmemorypool">memorypool</link>&#32;memoryPool;
25 
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;first&#32;hash&#32;function</emphasis>
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;hash1(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;key)&#32;{
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::hash&lt;std::string&gt;&#32;hasher;
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hasher(key)&#32;%&#32;capacity;
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;second&#32;hash&#32;function.&#32;Should&#32;never&#32;return&#32;0</emphasis>
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;hash2(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;key)&#32;{
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::hash&lt;std::string&gt;&#32;hasher;
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(hasher(key)&#32;%&#32;(capacity&#32;-&#32;1))&#32;+&#32;1;
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
37 &#32;&#32;&#32;&#32;
38 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classhashtable_1ae538aec043b2dcfb97529053484640ce">hashtable</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;:&#32;capacity(size),&#32;table(size),&#32;memoryPool(size)&#32;{}
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classhashtable_1a0e8cd243f696051b91e3ac04205564c5">hashtable</link>()&#32;:&#32;capacity(0),&#32;table(0),&#32;memoryPool(0)&#32;{}
51 
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classhashtable_1a4c02725230715510665452b4ee20e209">insert</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;key,&#32;std::string&amp;&#32;value)&#32;{
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;index&#32;=&#32;hash1(key);
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;step&#32;=&#32;hash2(key);
63 
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;capacity;&#32;++i)&#32;{
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;expected&#32;=&#32;<emphasis role="keyword">false</emphasis>;
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;(index&#32;+&#32;i&#32;*&#32;step)&#32;%&#32;capacity;
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(table[pos].occupied.compare_exchange_strong(expected,&#32;<emphasis role="keyword">true</emphasis>))&#32;{
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;table[pos].key&#32;=&#32;key;
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;table[pos].value&#32;=&#32;memoryPool.<link linkend="_classmemorypool_1aff5c0156c665b592139431231496d305">allocate</link>(key,&#32;std::move(value));
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
75 
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classhashtable_1a6f614816407ca67d2feccc4eb6f11cf2">get</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;key)&#32;{
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;index&#32;=&#32;hash1(key);
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;step&#32;=&#32;hash2(key);
85 &#32;&#32;&#32;&#32;
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;capacity;&#32;++i)&#32;{
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;(index&#32;+&#32;i&#32;*&#32;step)&#32;%&#32;capacity;
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(table[pos].occupied.load()&#32;&amp;&amp;&#32;table[pos].key&#32;==&#32;key)&#32;{
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;table[pos].value-&gt;value;
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classhashtable_1a84de2b2fb13c58b207081fc6c239b3b5">del</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;key)&#32;{
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;index&#32;=&#32;hash1(key);
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;step&#32;=&#32;hash2(key);
105 &#32;&#32;&#32;&#32;
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;capacity;&#32;++i)&#32;{
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;(index&#32;+&#32;i&#32;*&#32;step)&#32;%&#32;capacity;
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;expected&#32;=&#32;<emphasis role="keyword">false</emphasis>;
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(table[pos].key&#32;==&#32;key&#32;&amp;&amp;&#32;table[pos].occupied.compare_exchange_strong(expected,&#32;<emphasis role="keyword">true</emphasis>))&#32;{
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memoryPool.<link linkend="_classmemorypool_1a56e8e86546b458db97dacf75730abc2a">deallocate</link>(table[pos].value);
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;table[pos].occupied.store(<emphasis role="keyword">false</emphasis>);
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print(){
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;capacity;&#32;i++){
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(table[i].occupied.load()){
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;table[i].key&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;table[i].value-&gt;value&#32;&lt;&lt;&#32;std::endl;
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
124 &#32;&#32;&#32;&#32;};
</programlisting></section>
